

EchoWithColor(COLOR GREEN "-- Configure libcopp")


# ========== build library ==========
source_group_by_dir(COPP_SRC_LIST)
# source_group_by_dir(COPP_OBJ_LIST)

if (LIBCOPP_FCONTEXT_USE_TSX)
    add_compiler_define(LIBCOPP_FCONTEXT_USE_TSX=1)
endif()

if(BUILD_SHARED_LIBS)
    add_library(${PROJECT_LIBCOPP_LIB_LINK} SHARED ${COPP_SRC_LIST} ${COPP_OBJ_LIST})
    set_target_properties(${PROJECT_LIBCOPP_LIB_LINK} PROPERTIES 
        C_VISIBILITY_PRESET "hidden"
        CXX_VISIBILITY_PRESET "hidden"
    )
    target_compile_definitions(${PROJECT_LIBCOPP_LIB_LINK}
        PRIVATE LIBCOPP_API_COPP_NATIVE=1 LIBCOPP_API_DLL=1
    )
    set_target_properties(${PROJECT_LIBCOPP_LIB_LINK} PROPERTIES INTERFACE_COMPILE_DEFINITIONS LIBCOPP_API_DLL=1)
else ()
    add_library(${PROJECT_LIBCOPP_LIB_LINK} STATIC ${COPP_SRC_LIST} ${COPP_OBJ_LIST})
    set_target_properties(${PROJECT_LIBCOPP_LIB_LINK} PROPERTIES 
        C_VISIBILITY_PRESET "hidden"
        CXX_VISIBILITY_PRESET "hidden"
    )
    target_compile_definitions(${PROJECT_LIBCOPP_LIB_LINK}
        PRIVATE LIBCOPP_API_COPP_NATIVE=1
    )
endif()

target_include_directories(${PROJECT_LIBCOPP_LIB_LINK} 
    PUBLIC 
        "$<BUILD_INTERFACE:${PROJECT_LIBCOPP_ROOT_INC_DIR}>"
        "$<INSTALL_INTERFACE:include>"
)

install(TARGETS ${PROJECT_LIBCOPP_LIB_LINK}
    EXPORT ${PROJECT_LIBCOPP_EXPORT_NAME}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
)

install(DIRECTORY "${PROJECT_LIBCOPP_INC_DIR}"
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    USE_SOURCE_PERMISSIONS
    PATTERN ".svn" EXCLUDE
    PATTERN ".git" EXCLUDE
    PATTERN "*.in" EXCLUDE
)

export(TARGETS ${PROJECT_LIBCOPP_LIB_LINK}
    FILE "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/cmake/${PROJECT_LIBCOPP_EXPORT_NAME}.cmake"
    NAMESPACE libcopp::
    EXPORT_LINK_INTERFACE_LIBRARIES
)
install(
    EXPORT ${PROJECT_LIBCOPP_EXPORT_NAME}
    NAMESPACE "libcopp::"
    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake"
)
