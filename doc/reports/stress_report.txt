=======================================================================================
Env: Linux version 3.14.3-200.fc20.x86_64 (mockbuild@bkernel02) (gcc version 4.8.2 20131212 (Red Hat 4.8.2-7) (GCC) ) #1 SMP Tue May 6 19:00:18 UTC 2014
System: Linux
CPU: AMD Phenom(tm) II X4 830 Processor (800MHz- 2800MHz)
Memory: 8GB DDR3-1333
Run Env => thread number: 1, stack memory cost 1.6GB/2.0GB
Compile Options:-O2 -g -DNDEBUG -ggdb -std=gnu++11 -Wall -Werror -rdynamic -Wno-unused-local-typedefs -fsplit-stack

###################### context coroutine (stack using memory pool) ###################
########## Cmd: sample/sample_stress_test_coroutines_mem_pool 10000 1000 200
allocate 10000 coroutine, cost time: 0 s, clock time: 3 ms, avg: 300 ns
create 10000 coroutine, cost time: 0 s, clock time: 76 ms, avg: 7600 ns
switch 10000 coroutine contest 10000000 times, cost time: 4 s, clock time: 3802 ms, avg: 380 ns
remove 10000 coroutine, cost time: 0 s, clock time: 27 ms, avg: 2700 ns
########## Cmd: sample/sample_stress_test_coroutines_mem_pool 1000 1000 2048
allocate 1000 coroutine, cost time: 0 s, clock time: 0 ms, avg: 0 ns
create 1000 coroutine, cost time: 0 s, clock time: 8 ms, avg: 8000 ns
switch 1000 coroutine contest 1000000 times, cost time: 1 s, clock time: 249 ms, avg: 249 ns
remove 1000 coroutine, cost time: 0 s, clock time: 4 ms, avg: 4000 ns

###################### context coroutine (stack using default allocator[mmap/VirtualAlloc]) ###################
########## Cmd: sample/sample_stress_test_coroutine 10000 1000 200
allocate 10000 coroutine, cost time: 0 s, clock time: 2 ms, avg: 200 ns
create 10000 coroutine, cost time: 0 s, clock time: 74 ms, avg: 7400 ns
switch 10000 coroutine contest 10000000 times, cost time: 3 s, clock time: 3400 ms, avg: 340 ns
remove 10000 coroutine, cost time: 0 s, clock time: 30 ms, avg: 3000 ns
########## Cmd: sample/sample_stress_test_coroutine 1000 1000 2048
allocate 1000 coroutine, cost time: 0 s, clock time: 0 ms, avg: 0 ns
create 1000 coroutine, cost time: 0 s, clock time: 8 ms, avg: 8000 ns
switch 1000 coroutine contest 1000000 times, cost time: 0 s, clock time: 223 ms, avg: 223 ns
remove 1000 coroutine, cost time: 0 s, clock time: 3 ms, avg: 3000 ns

###################### context coroutine (stack using malloc/free) ###################
########## Cmd: sample/sample_stress_test_coroutine_malloc 10000 1000 200
allocate 10000 coroutine, cost time: 0 s, clock time: 2 ms, avg: 200 ns
create 10000 coroutine, cost time: 0 s, clock time: 45 ms, avg: 4500 ns
switch 10000 coroutine contest 10000000 times, cost time: 4 s, clock time: 3851 ms, avg: 385 ns
remove 10000 coroutine, cost time: 0 s, clock time: 8 ms, avg: 800 ns
########## Cmd: sample/sample_stress_test_coroutine_malloc 1000 1000 2048
allocate 1000 coroutine, cost time: 0 s, clock time: 0 ms, avg: 0 ns
create 1000 coroutine, cost time: 0 s, clock time: 5 ms, avg: 5000 ns
switch 1000 coroutine contest 1000000 times, cost time: 1 s, clock time: 264 ms, avg: 264 ns
remove 1000 coroutine, cost time: 0 s, clock time: 2 ms, avg: 2000 ns

###################### task (stack using memory pool) ###################
########## Cmd: sample/sample_stress_test_task_mem_pool 10000 1000 200
create 10000 task, cost time: 0 s, clock time: 46 ms, avg: 4600 ns
switch 10000 tasks 10000000 times, cost time: 5 s, clock time: 4952 ms, avg: 495 ns
remove 10000 tasks, cost time: 0 s, clock time: 1 ms, avg: 100 ns
########## Cmd: sample/sample_stress_test_task_mem_pool 1000 1000 2048
create 1000 task, cost time: 0 s, clock time: 6 ms, avg: 6000 ns
switch 1000 tasks 1000000 times, cost time: 0 s, clock time: 351 ms, avg: 351 ns
remove 1000 tasks, cost time: 0 s, clock time: 0 ms, avg: 0 ns

###################### task (stack using default allocator[mmap/VirtualAlloc]) ###################
########## Cmd: sample/sample_stress_test_task 10000 1000 200
create 10000 task, cost time: 0 s, clock time: 78 ms, avg: 7800 ns
switch 10000 tasks 10000000 times, cost time: 5 s, clock time: 5350 ms, avg: 535 ns
remove 10000 tasks, cost time: 0 s, clock time: 33 ms, avg: 3300 ns
########## Cmd: sample/sample_stress_test_task 1000 1000 2048
create 1000 task, cost time: 0 s, clock time: 8 ms, avg: 8000 ns
switch 1000 tasks 1000000 times, cost time: 1 s, clock time: 354 ms, avg: 354 ns
remove 1000 tasks, cost time: 0 s, clock time: 4 ms, avg: 4000 ns

###################### task (stack using malloc/free) ###################
########## Cmd: sample/sample_stress_test_task_malloc 10000 1000 200
create 10000 task, cost time: 0 s, clock time: 73 ms, avg: 7300 ns
switch 10000 tasks 10000000 times, cost time: 5 s, clock time: 5037 ms, avg: 503 ns
remove 10000 tasks, cost time: 0 s, clock time: 30 ms, avg: 3000 ns
########## Cmd: sample/sample_stress_test_task_malloc 1000 1000 2048
create 1000 task, cost time: 0 s, clock time: 8 ms, avg: 8000 ns
switch 1000 tasks 1000000 times, cost time: 0 s, clock time: 354 ms, avg: 354 ns
remove 1000 tasks, cost time: 0 s, clock time: 4 ms, avg: 4000 ns

