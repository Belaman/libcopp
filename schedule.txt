差异化：

1. 编译环境 <=> context 结构
2. 编译环境 <=> 切换方式
3. 编译环境+选择 <=> 创建栈空间
    3.1 编译环境 <=> 系统分配
    3.2 选择 <=> 内存池


1. coroutine_context
     -- stack_context
     -- - stack_context_allocator ( - 栈方向判断)
     -- fcontext (from boost)


基本控制接口:
1. create
2. start
3. yield
4. resume <=> 等同于start
5. stop
6. destroy

基本数据接口:
1. add_parameter
2. get_parameter

3. get_return

基本引用数据:
7. caller
     -- 传入参数
     -- 传出参数
8. callee


高级接口:
1. 接口覆盖（基本控制接口） + 事件响应
2. get_status (EN_CO_STATUS_START|EN_CO_STATUS_RUN|EN_CO_STATUS_PAUSE|EN_CO_STATUS_STOP)
3. join
    -- 3.1 绑定EN_EV_ON_DESTROY事件
    -- 3.2 yield

事件接口:
1. add_listener 
     -- 1.1 EN_EV_ON_START
     -- 1.2 EN_EV_ON_YIELD
     -- 1.3 EN_EV_ON_RESUME
     -- 1.4 EN_EV_ON_STOP
     -- 1.5 EN_EV_ON_FINISH
     -- 1.6 EN_EV_ON_DESTROY

压测:
1. 内存占用
2. 切换时间



外部管理:
main loop
     -- event -> Task.Start 
     -- event -> Task.Resume
     -- event -> Task.Stop
